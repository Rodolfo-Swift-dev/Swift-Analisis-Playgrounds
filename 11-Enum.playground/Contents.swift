import UIKit

//Enums

//Aparte de crear tipos en Swift con Struct y Class tambi√©n podemos crear tipos con Enums






//Sintaxis

enum clima {
case sol
case lluvia
case nublado
}

//Dentro del Enum podemos definir diferentes estados que queremos usar dentro de nuestro nuevo tipo y se llamar√°n case.
//con esto podemos aplicar distintas l√≥gicas de c√≥digo en distintos cases.
//es altamente recomendable utilizar los enum en conjunto con switch





//Instancia de un enum

let climaStatus = clima.sol



//Instancia de  un enum se√±alando su tipo

Let climaStatus1 : clima = .sol

//con este √∫ltimo ejemplo lo instanciamos indicando su tipo, lo que nos permite asignarle cualquier clase dentro de este tipo


//Enum con inicializador

enum clima {
case sol
case lluvia
case nublado
init (isRain: Bool){
        If isRain {
self = .lluvia
}else {
self = .sol
}
}
}

let clima = clima( isRain : true)
print ( clima)

// RESULTADO üëá
// lluvia

//un enum a pesar de ser un tipo como Class o Struct no necesita inicializacion para poder utilizar el enum, podemos asignar directamente el case de un Enum a una constante o variable




//Enum con Switch

enum clima {
case sol
case lluvia
case nublado
}

let climaActual = clima.sol

switch climaActual {

case .sol :
      print("Lindo dia")
case .lluvia :
      print("H√∫medo y mojado")
case .nublado :
      print("fr√≠o y viento")

}

En ocasiones tambi√©n podemos agrupar distintos case dentro de un bloque de codigo

let climaActual1 = clima.sol

switch climaActual1 {

case .sol :
     break
case .lluvia, case .nublado:
      print("H√∫medo y mojado")

}


//Tambi√©n podr√≠amos ocupar la keyword break dentro de un case, as√≠ indic√°ndole que no queremos implementar ning√∫n tipo de l√≥gica de codigo. En este caso si se llegara a ejecutar el case .sol se ejecutar√° el break y salimos del scope del c√≥digo y continuamos con el resto de control de flujo.

//en vez de un switch tambi√©n podr√≠amos  ver los valores del enum con sentencia if y de esta forma podr√≠amos ver el valor o los valores como nosotros queramos, a diferencia  del switch, que me eval√∫a el total de posibles valores del enum.

if messageStatus == .sent {
    print("Message Sent (If Statement)")
}





//Enum y Default Case

//como mencion√°bamos anteriormente el switch eval√∫a todos los posibles valores, pero adem√°s podemos implementar un case que es por defecto. Cuando aplicamos el case por defecto podemos incluir algunos cases con posibles valores y en el case por defecto cubrir√° todos los cases que no hayan sido cubiertos.

//ejemplo de implementaci√≥n de Enum con Switch con case default

enum MessageStatus {
    case sent
    case received
    case read
}

let messageStatus = MessageStatus.sent

switch messageStatus {
    case .received:
        print("Message Received")
    default:
        print("Other value")
}






//Metodos y propiedades dentro de un Enum

//al crear un Enum podemos crear m√©todos de instancia, m√©todos de tipo y propiedades computadas

//creacion de Enum con m√©todo de tipo, m√©todo de instancia y propiedad computada

enum CompassPoint {
    case north
    case south
    case east
    case west
    
    // Propiedad
    var owner: String { "SwiftBeta" }

    // M√©todo de Instancia
    func printValue() -> String {
        "Value: M√©todo de Instancia"
    }
    
    // M√©todo de Tipo
    static func printMessage() -> String {
        "Message: M√©todo de tipo"
    }
}

//Ahora podemos crear una constante con el valor de un case de nuestro Enum. De esta manera podemos llamar a la propiedad computada y al m√©todo de instancia y adem√°s podemos llamar al m√©todo de tipo

let compassPoint: CompassPoint = .north
compassPoint.owner
compassPoint.printValue()

// RESULTADO üëá
// SwiftBeta
// Value: M√©todo de Instancia


‚ÄúCompassPoint.printMessage()
// RESULTADO üëá
// Message: M√©todo de tipo‚Äù





//Enum con tipo de valor

//los Enum son de tipo de valor, es decir los cambios realizados en una de sus copias no se ve reflejado en las dem√°s.

enum Move {
    case top
    case right
    case bottom
    case left
}

//instancia del enum
var firstMove = Move.top

//creamos variables y asignamos valor firstMove
var secondMove = firstMove
var thirdMove = firstMove

//cambiamos valor de una variable
secondMove = .right

//si verificamos con un print podremos darnos cuenta que el cambio no afecta a las dem√°s copias. si fuera una clase el cambio se ver√≠a reflejado en las dem√°s copias.





//Iterar sobre los cases de un Enum

//como Enum es un tipo podemos tambi√©n adoptar protocolos y uno utilizado especialmente en los Enum es CaseIterable, el cual de muchas funcionalidades y propiedades como el c√≥digo a continuaci√≥n donde accedemos a allCases

//Enum con protocolo CaseIterable
enum Week: CaseIterable {
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
}

//sin inicializar
Week.allCases.forEach { print($0) }

//Con inicializacion
let numberOfDays = Week.allCases.count
print("Week days: \(numberOfDays)")





//Enum con Valores asociados

//a veces por necesidad en nuestros Enum debemos agregar par√°metros de entrada(puedan recibir valores) al interior de nuestros case, similar a los par√°metros de funciones

//Enum con valores asociados y nombres(number, digits, cvv
enum Field {
    case name(String)
    case street(String)
    case phone(number: String)
    case creditCard(digits: String, cvv: Int)
}


//Inicializacion de Enum con valores asociados

let creditCardField = Field.creditCard(digits: "1234 5678 9012", cvv: 123)


//Implementacion Switch y Enum con valores asociados

switch creditCardField {
case .creditCard(digits: let digits, cvv: _):
    print("Credit Card: \(digits)")
default:
    print("Do nothing...")
}

//en el ejemplo anterior tomamos un valor de par√°metro y lo guardamos dentro de una constante la cual ocupamos en el print y tambi√©n omitimos capturar un valor asociado con el signo _





//Enum con Raw Value

//tambi√©n podemos dentro de nuestros Enum, agregar case con valores por defecto.
//para poder hacer RawValue, es necesario que el tipo de dato de todos los cases deben ser del mismo tipo

//Enum con RawValue

enum Parameter: String {
    case query = "El Libro de Swift"
    case limit = "50"
    case author = "SwiftBeta"
}


//Inicializacion de Enum con RawValue

let parameter = Parameter.query.rawValue
let limit = Parameter.limit.rawValue
let author = Parameter.author.rawValue

print(parameter)
print(limit)
print(author)

// RESULTADO üëá
// Libro swift
// 50
// SwiftBeta‚Äù

//para poder acceder a un Enum con propiedades RawValue, es necesario que todos los cases sean del mismo tipo de datos


enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

//en este c√≥digo podemos ver como como fijando 1 solo valor por defecto, el resto de los cases asumir√°n un valor incrementado en 1 para cada 1

let mercury = Planet.mercury.rawValue
let earth = Planet.earth.rawValue
let neptune = Planet.neptune.rawValue

print(mercury)
print(earth)
print(neptune)

// RESULTADO üëá
// 1
// 3
// 8
